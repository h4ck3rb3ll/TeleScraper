# -*- coding: utf-8 -*-
"""teleScraper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D4ecvcyN1MXuI_lDiSfSH7VU_ewAVUBZ

This works in Google Colabs
"""

#install first
!pip install telethon
!pip install pandas

rm session_name.session

from telethon import TelegramClient
from telethon.errors import FloodWaitError
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsSearch, MessageEntityUrl
import pandas as pd
import asyncio
import time

# Telegram API Credentials
API_ID = 'here ur api id'
API_HASH = 'your api hash'
GROUP_USERNAME = 'group name'

client = TelegramClient('session_name', API_ID, API_HASH)

async def fetch_all_members(chat):
    members = []
    offset = 0
    limit = 100
    while True:
        try:
            participants = await client(GetParticipantsRequest(
                channel=chat,
                filter=ChannelParticipantsSearch(''),
                offset=offset,
                limit=limit,
                hash=0
            ))
        except FloodWaitError as e:
            print(f"FloodWaitError: waiting for {e.seconds}s")
            await asyncio.sleep(e.seconds)
            continue

        if not participants.users:
            break

        for user in participants.users:
            members.append({
                "User ID": user.id,
                "Username": user.username or "",
                "First Name": user.first_name or "",
                "Last Name": user.last_name or "",
                "Access Hash": user.access_hash
            })

        offset += len(participants.users)
        if len(participants.users) < limit:
            break
    return members
#works only when ur member in the group
async def fetch_all_messages(chat, limit=0):
    messages = []
    async for msg in client.iter_messages(chat, limit=limit):
        messages.append({
            "Date": msg.date,
            "Sender ID": msg.sender_id,
            "Message": msg.text.strip().replace('\n', ' ') if msg.text else "",
            "Message ID": msg.id
        })
    return messages

async def main():
    await client.start()
    chat = await client.get_entity(GROUP_USERNAME)

    print("[*] Fetching members...")
    members = await fetch_all_members(chat)
    members_df = pd.DataFrame(members)
    members_df.to_csv("group_members.csv", index=False, encoding="utf-8")
    print(f"[+] Saved {len(members)} members to group_members.csv")

    print("[*] Fetching messages...")
    messages = await fetch_all_messages(chat)
    messages_df = pd.DataFrame(messages)
    messages_df.to_csv("group_messages.csv", index=False, encoding="utf-8")
    print(f"[+] Saved {len(messages)} messages to group_messages.csv")

    await client.disconnect()

await main()